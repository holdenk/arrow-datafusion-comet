== Physical Plan ==
TakeOrderedAndProject (85)
+- * HashAggregate (84)
   +- Exchange (83)
      +- * HashAggregate (82)
         +- * Expand (81)
            +- Union (80)
               :- * Project (30)
               :  +- * BroadcastHashJoin LeftOuter BuildRight (29)
               :     :- * HashAggregate (15)
               :     :  +- Exchange (14)
               :     :     +- * HashAggregate (13)
               :     :        +- * Project (12)
               :     :           +- * BroadcastHashJoin Inner BuildRight (11)
               :     :              :- * Project (6)
               :     :              :  +- * BroadcastHashJoin Inner BuildRight (5)
               :     :              :     :- * ColumnarToRow (3)
               :     :              :     :  +- CometFilter (2)
               :     :              :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
               :     :              :     +- ReusedExchange (4)
               :     :              +- BroadcastExchange (10)
               :     :                 +- * ColumnarToRow (9)
               :     :                    +- CometFilter (8)
               :     :                       +- CometScan parquet spark_catalog.default.store (7)
               :     +- BroadcastExchange (28)
               :        +- * HashAggregate (27)
               :           +- Exchange (26)
               :              +- * HashAggregate (25)
               :                 +- * Project (24)
               :                    +- * BroadcastHashJoin Inner BuildRight (23)
               :                       :- * Project (21)
               :                       :  +- * BroadcastHashJoin Inner BuildRight (20)
               :                       :     :- * ColumnarToRow (18)
               :                       :     :  +- CometFilter (17)
               :                       :     :     +- CometScan parquet spark_catalog.default.store_returns (16)
               :                       :     +- ReusedExchange (19)
               :                       +- ReusedExchange (22)
               :- * Project (49)
               :  +- * BroadcastNestedLoopJoin Inner BuildLeft (48)
               :     :- BroadcastExchange (39)
               :     :  +- * HashAggregate (38)
               :     :     +- Exchange (37)
               :     :        +- * HashAggregate (36)
               :     :           +- * Project (35)
               :     :              +- * BroadcastHashJoin Inner BuildRight (34)
               :     :                 :- * ColumnarToRow (32)
               :     :                 :  +- CometScan parquet spark_catalog.default.catalog_sales (31)
               :     :                 +- ReusedExchange (33)
               :     +- * HashAggregate (47)
               :        +- Exchange (46)
               :           +- * HashAggregate (45)
               :              +- * Project (44)
               :                 +- * BroadcastHashJoin Inner BuildRight (43)
               :                    :- * ColumnarToRow (41)
               :                    :  +- CometScan parquet spark_catalog.default.catalog_returns (40)
               :                    +- ReusedExchange (42)
               +- * Project (79)
                  +- * BroadcastHashJoin LeftOuter BuildRight (78)
                     :- * HashAggregate (64)
                     :  +- Exchange (63)
                     :     +- * HashAggregate (62)
                     :        +- * Project (61)
                     :           +- * BroadcastHashJoin Inner BuildRight (60)
                     :              :- * Project (55)
                     :              :  +- * BroadcastHashJoin Inner BuildRight (54)
                     :              :     :- * ColumnarToRow (52)
                     :              :     :  +- CometFilter (51)
                     :              :     :     +- CometScan parquet spark_catalog.default.web_sales (50)
                     :              :     +- ReusedExchange (53)
                     :              +- BroadcastExchange (59)
                     :                 +- * ColumnarToRow (58)
                     :                    +- CometFilter (57)
                     :                       +- CometScan parquet spark_catalog.default.web_page (56)
                     +- BroadcastExchange (77)
                        +- * HashAggregate (76)
                           +- Exchange (75)
                              +- * HashAggregate (74)
                                 +- * Project (73)
                                    +- * BroadcastHashJoin Inner BuildRight (72)
                                       :- * Project (70)
                                       :  +- * BroadcastHashJoin Inner BuildRight (69)
                                       :     :- * ColumnarToRow (67)
                                       :     :  +- CometFilter (66)
                                       :     :     +- CometScan parquet spark_catalog.default.web_returns (65)
                                       :     +- ReusedExchange (68)
                                       +- ReusedExchange (71)


(unknown) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(3) ColumnarToRow [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(4) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#6]

(unknown) Scan parquet spark_catalog.default.store
Output [1]: [s_store_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(8) CometFilter
Input [1]: [s_store_sk#7]
Condition : isnotnull(s_store_sk#7)

(9) ColumnarToRow [codegen id : 2]
Input [1]: [s_store_sk#7]

(10) BroadcastExchange
Input [1]: [s_store_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]

(13) HashAggregate [codegen id : 3]
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]
Keys [1]: [s_store_sk#7]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#8, sum#9]
Results [3]: [s_store_sk#7, sum#10, sum#11]

(14) Exchange
Input [3]: [s_store_sk#7, sum#10, sum#11]
Arguments: hashpartitioning(s_store_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 8]
Input [3]: [s_store_sk#7, sum#10, sum#11]
Keys [1]: [s_store_sk#7]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_ext_sales_price#2))#12, sum(UnscaledValue(ss_net_profit#3))#13]
Results [3]: [s_store_sk#7, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#12,17,2) AS sales#14, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#13,17,2) AS profit#15]

(unknown) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#19), dynamicpruningexpression(sr_returned_date_sk#19 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(17) CometFilter
Input [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19]
Condition : isnotnull(sr_store_sk#16)

(18) ColumnarToRow [codegen id : 6]
Input [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19]

(19) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#21]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_returned_date_sk#19]
Right keys [1]: [d_date_sk#21]
Join type: Inner
Join condition: None

(21) Project [codegen id : 6]
Output [3]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18]
Input [5]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19, d_date_sk#21]

(22) ReusedExchange [Reuses operator id: 10]
Output [1]: [s_store_sk#22]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_store_sk#16]
Right keys [1]: [s_store_sk#22]
Join type: Inner
Join condition: None

(24) Project [codegen id : 6]
Output [3]: [sr_return_amt#17, sr_net_loss#18, s_store_sk#22]
Input [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, s_store_sk#22]

(25) HashAggregate [codegen id : 6]
Input [3]: [sr_return_amt#17, sr_net_loss#18, s_store_sk#22]
Keys [1]: [s_store_sk#22]
Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#17)), partial_sum(UnscaledValue(sr_net_loss#18))]
Aggregate Attributes [2]: [sum#23, sum#24]
Results [3]: [s_store_sk#22, sum#25, sum#26]

(26) Exchange
Input [3]: [s_store_sk#22, sum#25, sum#26]
Arguments: hashpartitioning(s_store_sk#22, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(27) HashAggregate [codegen id : 7]
Input [3]: [s_store_sk#22, sum#25, sum#26]
Keys [1]: [s_store_sk#22]
Functions [2]: [sum(UnscaledValue(sr_return_amt#17)), sum(UnscaledValue(sr_net_loss#18))]
Aggregate Attributes [2]: [sum(UnscaledValue(sr_return_amt#17))#27, sum(UnscaledValue(sr_net_loss#18))#28]
Results [3]: [s_store_sk#22, MakeDecimal(sum(UnscaledValue(sr_return_amt#17))#27,17,2) AS returns#29, MakeDecimal(sum(UnscaledValue(sr_net_loss#18))#28,17,2) AS profit_loss#30]

(28) BroadcastExchange
Input [3]: [s_store_sk#22, returns#29, profit_loss#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(29) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [s_store_sk#7]
Right keys [1]: [s_store_sk#22]
Join type: LeftOuter
Join condition: None

(30) Project [codegen id : 8]
Output [5]: [sales#14, coalesce(returns#29, 0.00) AS returns#31, (profit#15 - coalesce(profit_loss#30, 0.00)) AS profit#32, store channel AS channel#33, s_store_sk#7 AS id#34]
Input [6]: [s_store_sk#7, sales#14, profit#15, s_store_sk#22, returns#29, profit_loss#30]

(unknown) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_call_center_sk#35, cs_ext_sales_price#36, cs_net_profit#37, cs_sold_date_sk#38]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#38), dynamicpruningexpression(cs_sold_date_sk#38 IN dynamicpruning#39)]
ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(32) ColumnarToRow [codegen id : 10]
Input [4]: [cs_call_center_sk#35, cs_ext_sales_price#36, cs_net_profit#37, cs_sold_date_sk#38]

(33) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#40]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#38]
Right keys [1]: [d_date_sk#40]
Join type: Inner
Join condition: None

(35) Project [codegen id : 10]
Output [3]: [cs_call_center_sk#35, cs_ext_sales_price#36, cs_net_profit#37]
Input [5]: [cs_call_center_sk#35, cs_ext_sales_price#36, cs_net_profit#37, cs_sold_date_sk#38, d_date_sk#40]

(36) HashAggregate [codegen id : 10]
Input [3]: [cs_call_center_sk#35, cs_ext_sales_price#36, cs_net_profit#37]
Keys [1]: [cs_call_center_sk#35]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#36)), partial_sum(UnscaledValue(cs_net_profit#37))]
Aggregate Attributes [2]: [sum#41, sum#42]
Results [3]: [cs_call_center_sk#35, sum#43, sum#44]

(37) Exchange
Input [3]: [cs_call_center_sk#35, sum#43, sum#44]
Arguments: hashpartitioning(cs_call_center_sk#35, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(38) HashAggregate [codegen id : 11]
Input [3]: [cs_call_center_sk#35, sum#43, sum#44]
Keys [1]: [cs_call_center_sk#35]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#36)), sum(UnscaledValue(cs_net_profit#37))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_sales_price#36))#45, sum(UnscaledValue(cs_net_profit#37))#46]
Results [3]: [cs_call_center_sk#35, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#36))#45,17,2) AS sales#47, MakeDecimal(sum(UnscaledValue(cs_net_profit#37))#46,17,2) AS profit#48]

(39) BroadcastExchange
Input [3]: [cs_call_center_sk#35, sales#47, profit#48]
Arguments: IdentityBroadcastMode, [plan_id=6]

(unknown) Scan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_return_amount#49, cr_net_loss#50, cr_returned_date_sk#51]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#51), dynamicpruningexpression(cr_returned_date_sk#51 IN dynamicpruning#52)]
ReadSchema: struct<cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(41) ColumnarToRow [codegen id : 13]
Input [3]: [cr_return_amount#49, cr_net_loss#50, cr_returned_date_sk#51]

(42) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#53]

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cr_returned_date_sk#51]
Right keys [1]: [d_date_sk#53]
Join type: Inner
Join condition: None

(44) Project [codegen id : 13]
Output [2]: [cr_return_amount#49, cr_net_loss#50]
Input [4]: [cr_return_amount#49, cr_net_loss#50, cr_returned_date_sk#51, d_date_sk#53]

(45) HashAggregate [codegen id : 13]
Input [2]: [cr_return_amount#49, cr_net_loss#50]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#49)), partial_sum(UnscaledValue(cr_net_loss#50))]
Aggregate Attributes [2]: [sum#54, sum#55]
Results [2]: [sum#56, sum#57]

(46) Exchange
Input [2]: [sum#56, sum#57]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(47) HashAggregate
Input [2]: [sum#56, sum#57]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#49)), sum(UnscaledValue(cr_net_loss#50))]
Aggregate Attributes [2]: [sum(UnscaledValue(cr_return_amount#49))#58, sum(UnscaledValue(cr_net_loss#50))#59]
Results [2]: [MakeDecimal(sum(UnscaledValue(cr_return_amount#49))#58,17,2) AS returns#60, MakeDecimal(sum(UnscaledValue(cr_net_loss#50))#59,17,2) AS profit_loss#61]

(48) BroadcastNestedLoopJoin [codegen id : 14]
Join type: Inner
Join condition: None

(49) Project [codegen id : 14]
Output [5]: [sales#47, returns#60, (profit#48 - profit_loss#61) AS profit#62, catalog channel AS channel#63, cs_call_center_sk#35 AS id#64]
Input [5]: [cs_call_center_sk#35, sales#47, profit#48, returns#60, profit_loss#61]

(unknown) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_page_sk#65, ws_ext_sales_price#66, ws_net_profit#67, ws_sold_date_sk#68]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#68), dynamicpruningexpression(ws_sold_date_sk#68 IN dynamicpruning#69)]
PushedFilters: [IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(51) CometFilter
Input [4]: [ws_web_page_sk#65, ws_ext_sales_price#66, ws_net_profit#67, ws_sold_date_sk#68]
Condition : isnotnull(ws_web_page_sk#65)

(52) ColumnarToRow [codegen id : 17]
Input [4]: [ws_web_page_sk#65, ws_ext_sales_price#66, ws_net_profit#67, ws_sold_date_sk#68]

(53) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#70]

(54) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#68]
Right keys [1]: [d_date_sk#70]
Join type: Inner
Join condition: None

(55) Project [codegen id : 17]
Output [3]: [ws_web_page_sk#65, ws_ext_sales_price#66, ws_net_profit#67]
Input [5]: [ws_web_page_sk#65, ws_ext_sales_price#66, ws_net_profit#67, ws_sold_date_sk#68, d_date_sk#70]

(unknown) Scan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(57) CometFilter
Input [1]: [wp_web_page_sk#71]
Condition : isnotnull(wp_web_page_sk#71)

(58) ColumnarToRow [codegen id : 16]
Input [1]: [wp_web_page_sk#71]

(59) BroadcastExchange
Input [1]: [wp_web_page_sk#71]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(60) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_web_page_sk#65]
Right keys [1]: [wp_web_page_sk#71]
Join type: Inner
Join condition: None

(61) Project [codegen id : 17]
Output [3]: [ws_ext_sales_price#66, ws_net_profit#67, wp_web_page_sk#71]
Input [4]: [ws_web_page_sk#65, ws_ext_sales_price#66, ws_net_profit#67, wp_web_page_sk#71]

(62) HashAggregate [codegen id : 17]
Input [3]: [ws_ext_sales_price#66, ws_net_profit#67, wp_web_page_sk#71]
Keys [1]: [wp_web_page_sk#71]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#66)), partial_sum(UnscaledValue(ws_net_profit#67))]
Aggregate Attributes [2]: [sum#72, sum#73]
Results [3]: [wp_web_page_sk#71, sum#74, sum#75]

(63) Exchange
Input [3]: [wp_web_page_sk#71, sum#74, sum#75]
Arguments: hashpartitioning(wp_web_page_sk#71, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(64) HashAggregate [codegen id : 22]
Input [3]: [wp_web_page_sk#71, sum#74, sum#75]
Keys [1]: [wp_web_page_sk#71]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#66)), sum(UnscaledValue(ws_net_profit#67))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_sales_price#66))#76, sum(UnscaledValue(ws_net_profit#67))#77]
Results [3]: [wp_web_page_sk#71, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#66))#76,17,2) AS sales#78, MakeDecimal(sum(UnscaledValue(ws_net_profit#67))#77,17,2) AS profit#79]

(unknown) Scan parquet spark_catalog.default.web_returns
Output [4]: [wr_web_page_sk#80, wr_return_amt#81, wr_net_loss#82, wr_returned_date_sk#83]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#83), dynamicpruningexpression(wr_returned_date_sk#83 IN dynamicpruning#84)]
PushedFilters: [IsNotNull(wr_web_page_sk)]
ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(66) CometFilter
Input [4]: [wr_web_page_sk#80, wr_return_amt#81, wr_net_loss#82, wr_returned_date_sk#83]
Condition : isnotnull(wr_web_page_sk#80)

(67) ColumnarToRow [codegen id : 20]
Input [4]: [wr_web_page_sk#80, wr_return_amt#81, wr_net_loss#82, wr_returned_date_sk#83]

(68) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#85]

(69) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_returned_date_sk#83]
Right keys [1]: [d_date_sk#85]
Join type: Inner
Join condition: None

(70) Project [codegen id : 20]
Output [3]: [wr_web_page_sk#80, wr_return_amt#81, wr_net_loss#82]
Input [5]: [wr_web_page_sk#80, wr_return_amt#81, wr_net_loss#82, wr_returned_date_sk#83, d_date_sk#85]

(71) ReusedExchange [Reuses operator id: 59]
Output [1]: [wp_web_page_sk#86]

(72) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_web_page_sk#80]
Right keys [1]: [wp_web_page_sk#86]
Join type: Inner
Join condition: None

(73) Project [codegen id : 20]
Output [3]: [wr_return_amt#81, wr_net_loss#82, wp_web_page_sk#86]
Input [4]: [wr_web_page_sk#80, wr_return_amt#81, wr_net_loss#82, wp_web_page_sk#86]

(74) HashAggregate [codegen id : 20]
Input [3]: [wr_return_amt#81, wr_net_loss#82, wp_web_page_sk#86]
Keys [1]: [wp_web_page_sk#86]
Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#81)), partial_sum(UnscaledValue(wr_net_loss#82))]
Aggregate Attributes [2]: [sum#87, sum#88]
Results [3]: [wp_web_page_sk#86, sum#89, sum#90]

(75) Exchange
Input [3]: [wp_web_page_sk#86, sum#89, sum#90]
Arguments: hashpartitioning(wp_web_page_sk#86, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(76) HashAggregate [codegen id : 21]
Input [3]: [wp_web_page_sk#86, sum#89, sum#90]
Keys [1]: [wp_web_page_sk#86]
Functions [2]: [sum(UnscaledValue(wr_return_amt#81)), sum(UnscaledValue(wr_net_loss#82))]
Aggregate Attributes [2]: [sum(UnscaledValue(wr_return_amt#81))#91, sum(UnscaledValue(wr_net_loss#82))#92]
Results [3]: [wp_web_page_sk#86, MakeDecimal(sum(UnscaledValue(wr_return_amt#81))#91,17,2) AS returns#93, MakeDecimal(sum(UnscaledValue(wr_net_loss#82))#92,17,2) AS profit_loss#94]

(77) BroadcastExchange
Input [3]: [wp_web_page_sk#86, returns#93, profit_loss#94]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

(78) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [wp_web_page_sk#71]
Right keys [1]: [wp_web_page_sk#86]
Join type: LeftOuter
Join condition: None

(79) Project [codegen id : 22]
Output [5]: [sales#78, coalesce(returns#93, 0.00) AS returns#95, (profit#79 - coalesce(profit_loss#94, 0.00)) AS profit#96, web channel AS channel#97, wp_web_page_sk#71 AS id#98]
Input [6]: [wp_web_page_sk#71, sales#78, profit#79, wp_web_page_sk#86, returns#93, profit_loss#94]

(80) Union

(81) Expand [codegen id : 23]
Input [5]: [sales#14, returns#31, profit#32, channel#33, id#34]
Arguments: [[sales#14, returns#31, profit#32, channel#33, id#34, 0], [sales#14, returns#31, profit#32, channel#33, null, 1], [sales#14, returns#31, profit#32, null, null, 3]], [sales#14, returns#31, profit#32, channel#99, id#100, spark_grouping_id#101]

(82) HashAggregate [codegen id : 23]
Input [6]: [sales#14, returns#31, profit#32, channel#99, id#100, spark_grouping_id#101]
Keys [3]: [channel#99, id#100, spark_grouping_id#101]
Functions [3]: [partial_sum(sales#14), partial_sum(returns#31), partial_sum(profit#32)]
Aggregate Attributes [6]: [sum#102, isEmpty#103, sum#104, isEmpty#105, sum#106, isEmpty#107]
Results [9]: [channel#99, id#100, spark_grouping_id#101, sum#108, isEmpty#109, sum#110, isEmpty#111, sum#112, isEmpty#113]

(83) Exchange
Input [9]: [channel#99, id#100, spark_grouping_id#101, sum#108, isEmpty#109, sum#110, isEmpty#111, sum#112, isEmpty#113]
Arguments: hashpartitioning(channel#99, id#100, spark_grouping_id#101, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(84) HashAggregate [codegen id : 24]
Input [9]: [channel#99, id#100, spark_grouping_id#101, sum#108, isEmpty#109, sum#110, isEmpty#111, sum#112, isEmpty#113]
Keys [3]: [channel#99, id#100, spark_grouping_id#101]
Functions [3]: [sum(sales#14), sum(returns#31), sum(profit#32)]
Aggregate Attributes [3]: [sum(sales#14)#114, sum(returns#31)#115, sum(profit#32)#116]
Results [5]: [channel#99, id#100, sum(sales#14)#114 AS sales#117, sum(returns#31)#115 AS returns#118, sum(profit#32)#116 AS profit#119]

(85) TakeOrderedAndProject
Input [5]: [channel#99, id#100, sales#117, returns#118, profit#119]
Arguments: 100, [channel#99 ASC NULLS FIRST, id#100 ASC NULLS FIRST], [channel#99, id#100, sales#117, returns#118, profit#119]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (90)
+- * ColumnarToRow (89)
   +- CometProject (88)
      +- CometFilter (87)
         +- CometScan parquet spark_catalog.default.date_dim (86)


(unknown) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#120]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(87) CometFilter
Input [2]: [d_date_sk#6, d_date#120]
Condition : (((isnotnull(d_date#120) AND (d_date#120 >= 2000-08-03)) AND (d_date#120 <= 2000-09-02)) AND isnotnull(d_date_sk#6))

(88) CometProject
Input [2]: [d_date_sk#6, d_date#120]
Arguments: [d_date_sk#6], [d_date_sk#6]

(89) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(90) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:2 Hosting operator id = 16 Hosting Expression = sr_returned_date_sk#19 IN dynamicpruning#5

Subquery:3 Hosting operator id = 31 Hosting Expression = cs_sold_date_sk#38 IN dynamicpruning#5

Subquery:4 Hosting operator id = 40 Hosting Expression = cr_returned_date_sk#51 IN dynamicpruning#5

Subquery:5 Hosting operator id = 50 Hosting Expression = ws_sold_date_sk#68 IN dynamicpruning#5

Subquery:6 Hosting operator id = 65 Hosting Expression = wr_returned_date_sk#83 IN dynamicpruning#5


